const fips = require("./index");

const expected = {
  state: "AL",
  county: "Calhoun County",
  countyfp: "015",
  fips: "01015"
};

describe("The get function", () => {
  it("should return an object with state, county, county FIPS and FIPS property when provided an object with a state and county property", () => {
    expect(fips.get({ state: "AL", county: "Calhoun" })).toEqual(expected);
  });

  it("should return an object with a state, county, county FIPS and FIPS code property when provided a FIPS code and state abbreviation", () => {
    expect(fips.get({ fips: "015", state: 'AL' })).toEqual(expected);
  });

  it("should throw when it only receives a state name", () => {
    expect(() => fips.get({ state: "AL" })).toThrow();
  });

  it("should throw when it only receives a county name", () => {
    expect(() => fips.get({ county: "Calhoun" })).toThrow();
  });

  it("should throw when the state is longer than two characters", () => {
    expect(() => fips.get({ state: "Alabama", county: "Calhoun" })).toThrow();
  });

  it("should throw when it receives a FIPS code as a number", () => {
    expect(() => fips.get({ fips: 139 })).toThrow();
  });
});

describe("The getByCountyAndState function", () => {
  it("should return a FIPS code when provided a state abbreviation and county name", () => {
    expect(fips.getByCountyAndState("AL", "Calhoun")).toEqual(expected);
  });

  it("should return a FIPS code when provided a state abbreviation and county name without the word 'County'", () => {
    expect(fips.getByCountyAndState("AL", "Calhoun County")).toEqual(expected);
  });

  it("should throw when provided a state name instead of an abbreviation", () => {
    expect(() => fips.getByCountyAndState("Alabama", "Calhoun")).toThrow();
  });
});

describe("The getByFipsAndState function", () => {
  it("should return an object with a state and county property when provided a FIPS code string", () => {
    expect(fips.getByFipsAndState("015", "AL")).toEqual(expected);
  });

  it("should throw when provided a FIPS code number", () => {
    expect(() => fips.getByFipsAndState(215, 'AL')).toThrow();
  });
});

describe("The getCountiesByState function", () => {
  it("should return an array of 159 objects representing each county in GA", () => {
    expect(fips.getCountiesByState("GA")).toHaveLength(159);
  });

  it("should throw when provided a state name instead of an abbreviation", () => {
    expect(() => fips.getCountiesByState('Georgia')).toThrow();
  });
});

describe('The search function', () => {
  it("should return an array of results based on an input regex", () => {
    const actual = fips.search(/Calhoun/gi);
    expect(actual).toHaveLength(11);
  });

  it("should return an empty array if there aren't any matches", () => {
    const actual = fips.search(/zzzzz/gi);
    expect(actual).toEqual([]);
  });

  it("should throw if it receives anything but a regular expression", () => {
    expect(() => fips.search('Georgia')).toThrow();
  });
});
